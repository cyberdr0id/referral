openapi: 3.0.0
info:
  title: Referal
  description: The service exposes a RESTful API to send a candidate and its CV
  version: 1.0.0
  contact:
    email: akulovdc@gmail.com
servers:
  - url: http://localhost:8080/
paths:
  /auth/login:
    post:
      summary: User login
      tags:
        - auth
      requestBody:
        description: User logging in
        $ref: "#/components/requestBodies/AuthBody"
      responses:
        200:
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    format: JWT
              example:
                token: there_should_be_token
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /auth/signup:
    post:
      summary: User registration
      tags:
        - auth
      requestBody:
        description: User creating
        $ref: "#/components/requestBodies/AuthBody"
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                type: integer
              example:
                id: 256
        401:
          $ref: "#/components/responses/BadRequest"
        409:
          $ref: "#/components/responses/Conflict"
        500:
          $ref: "#/components/responses/InternalServerError"

  /referrals:
    post:
      summary: Send CV of a particular candidate
      tags:
        - cv
      security:
        - referalAuth: []
      requestBody:
        $ref: "#/components/requestBodies/CvSendBody"
      responses:
        201:
          description: Candidate loaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Candidate"
        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: Return a list with user requests
      tags:
        - cv
      security:
        - referalAuth: []
      responses:
        200:
          description: Getting user's requests history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Request"

        401:
          $ref: "#/components/responses/Unauthorized"
        500:
          $ref: "#/components/responses/InternalServerError"
  /cvs/{id}:
    get:
      summary: Download CV of a particular candidate
      tags:
        - cv
      security:
        - referalAuth: []
      parameters:
        - name: id
          in: path
          description: Should be entered candidate ID
          required: true
          schema:
            type: integer
      responses:
        200:
          description: CV successfuly loaded
          content:
            application/pdf:
              schema:
                type: string
                format: binary
              example:
                file: file.pdf
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    referalAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        password:
          type: string
          format: hash
        isadmin:
          type: boolean
          default: false
        created:
          type: string
          format: timestamp
        updated:
          type: string
          format: timestamp
      example:
        id: 1
        name: name
        password: password
        isadmin: false
        created: "2020-10-19 T 9:01 Z"
        updated: "2020-10-19 T 9:01 Z"
    Candidate:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        surname:
          type: string
        cvosfileid:
          type: integer
      example:
        id: 1
        name: name
        surname: surname
        cvosfileid: 1
    Request:
      type: object
      properties:
        id:
          type: integer
        userid:
          type: integer
        candidateid:
          type: integer
        status:
          type: string
          enum: [Rejected, Submitted, Accepted]
        created:
          type: string
          format: timestamp
        updated:
          type: string
          format: timestamp
      example:
        id: 1
        userid: 2
        candidateid: 3
        status: Rejected
        created: 2020-10-19 T 6:54:56 Z
        updated: 2020-10-19 T 6:54:56 Z
    Error:
      type: object
      properties:
        statusCode:
          type: integer
        message:
          type: string
  responses:
    InternalServerError:
      description: Unexpected server state detected
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 500
            message: Unexpected server state detected
    NotFound:
      description: The requested resource could not be found but may be available in the future
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 404
            message: The requested resource could not be found but may be available in the future
    Unauthorized:
      description: Authentication is required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 401
            message: Authentication is required
    BadRequest:
      description: The server cannot or will not process the request due to an apparent client error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 400
            message: The server cannot or will not process the request due to an apparent client error
    Conflict:
      description: Request could not be processed because of conflict in the current state of the resource
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
          example:
            statusCode: 409
            message: Request could not be processed because of conflict in the current state of the resource

  requestBodies:
    AuthBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              password:
                type: string
                format: hash
          example:
            name: nickname
            password: F72f%AsUO2^kGAsgk1^ma
    CvSendBody:
      description: Sending resume by user
      required: true
      content:
        multipart/form-data:
          schema:
            type: object
            properties:
              file:
                type: string
                format: binary
              candidateName:
                type: string
              candidateSurname:
                type: string
          example:
            file: file.pdf
            candidateName: Name
            candidateSurname: Surname
